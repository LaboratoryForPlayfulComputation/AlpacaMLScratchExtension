{"version":3,"file":"scratch-storage.js","sources":["webpack://ScratchStorage/webpack/bootstrap","webpack://ScratchStorage/./src/builtins/defaultBitmap.png","webpack://ScratchStorage/./src/builtins/defaultSound.wav","webpack://ScratchStorage/./src/builtins/defaultVector.svg","webpack://ScratchStorage/./node_modules/arraybuffer-loader/lib/to-array-buffer.js","webpack://ScratchStorage/./node_modules/microee/index.js","webpack://ScratchStorage/./node_modules/minilog/lib/common/filter.js","webpack://ScratchStorage/./node_modules/minilog/lib/common/minilog.js","webpack://ScratchStorage/./node_modules/minilog/lib/common/transform.js","webpack://ScratchStorage/./node_modules/minilog/lib/index.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/console.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/formatters/clean.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/formatters/color.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/formatters/learnboost.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/formatters/minilog.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/formatters/npm.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/formatters/time.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/formatters/util.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/formatters/withstack.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/redis.js","webpack://ScratchStorage/./node_modules/minilog/lib/node/stringify.js","webpack://ScratchStorage/./node_modules/minilog/lib/web/console.js","webpack://ScratchStorage/./node_modules/minilog/lib/web/formatters/color.js","webpack://ScratchStorage/./node_modules/minilog/lib/web/formatters/minilog.js","webpack://ScratchStorage/./node_modules/minilog/lib/web/formatters/util.js","webpack://ScratchStorage/./src/FetchWorkerTool.worker.js","webpack://ScratchStorage/./node_modules/worker-loader/dist/workers/InlineWorker.js","webpack://ScratchStorage/./src/Asset.js","webpack://ScratchStorage/./src/AssetType.js","webpack://ScratchStorage/./src/BuiltinHelper.js","webpack://ScratchStorage/./src/DataFormat.js","webpack://ScratchStorage/./src/FetchTool.js","webpack://ScratchStorage/./src/FetchWorkerTool.js","webpack://ScratchStorage/./src/Helper.js","webpack://ScratchStorage/./src/NetsTool.js","webpack://ScratchStorage/./src/ProxyTool.js","webpack://ScratchStorage/./src/ScratchStorage.js","webpack://ScratchStorage/./src/WebHelper.js","webpack://ScratchStorage/./src/index.js","webpack://ScratchStorage/./src/log.js","webpack://ScratchStorage/external \"base64-js\"","webpack://ScratchStorage/external \"js-md5\"","webpack://ScratchStorage/external \"nets\"","webpack://ScratchStorage/external \"stream\"","webpack://ScratchStorage/external \"text-encoding\"","webpack://ScratchStorage/external \"util\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","module.exports = require(\"../../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAAAAADmVT4XAAADZElEQVR42u3a70vbQBgH8O/7vOibvsmbFUEEWUGGUhQ25nDuhSKIUFDxlYi0SAd94atRmFiHCH2x4W8iiNtwowXRgd1QipJYY3N/1F4kTQ6XLKS9yyHcvWyO8MnT5y53Tw5EcIMESIAESIAESIAESIAEPFVAq/6l8G4oAQCp4aniwbUVJ6BVzafwqKXy1VZMgNb+CHzbyK4ZB+Bi0nnk0VyhsDiSoAmvvnMHmGUVAF6UG+0ffsxRhsRHky/AyCsAUpumX0wAAIs6T4CxDADDtcdZsal6gjmdH8AsAEC6+s8Fa48SFExeAKusAEju+V367AmUCi9ANQ0AU3pwcOw2cMEH0FwAAKz5X228pRLR5AI4TgIAtIDL24oLUE94AB6W7LsH/cONN14Ilh44AOqD9s2LQR1KHiB9zgGgOSGeuA3ocPrME1Q4ANaceyePAzrcjHmAZYs9IBeW4/fzHiAwTCwAgTle9ACZK44ALDT9e6x7gL4aT0BQCHb4AqgA5/1TTOMLoJ7vZSMM0H/GHnCeDnu+CrU8vGYPcN5FADBYD0vCaYPDy+i0p337GSMsS1Z4vA3t9QgAZTt0IuIxFRPSKicAQHlvhk3FXF5GhBByMa8qo/sBO6BarwuYbYrYnFKDYEvE7phKgcxvEQBqnvhgiQCUOgoAO4C3JOS3L/hv23UXxVldBECfcueAqpAa0WGy/QeULREAY6aTXRFDgBuA13+ElOncAERMAGaA9hBQD4gQQHsIRE1AZoD2xrgQS5nOZyHgFKmWDSIG4GRAVidiAE4GRB6AzAB2AKIPQFaA5myHA5AV4ESNugZhC7BLR50lIBPAebrzBGQCKAFQNSIMcDvRTQIwAHxNApM3RBygGK0uyhxwOwGsPAgEnPWj5ycRCNiJtBHlAChGKQVwANzPY+CXSMDNWISiLA9AfRA5IhJQ68UnoQAt+AtOPIBKhJosF8B6UM0yLkAxQk2WCyDX9SiUh1gkQAIkoCuAvjGuquMbuijAtwG7MPL8yBICOHSPk3W8Ne8KcEUdmBi6FADYos+QleIH0N/ogOxd7AD6uAS6WRU8WcBdlgZMG/EnYUlwEpLLoQ4PjzGbiA5UsRMRsbQ+5ziDJmYqJuR6NaMomdXuFuZyPSABEiABEiABEiABEiAc8Bd6VyvCEKGqcQAAAABJRU5ErkJggg==\")","module.exports = require(\"../../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"UklGRiYAAABXQVZFZm10IBAAAAABAAEAIlYAAESsAAACABAAZGF0YQIAAAAAAA==\")","module.exports = require(\"../../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"PD94bWwgdmVyc2lvbj0iMS4wIj8+Cjxzdmcgd2lkdGg9IjEyOCIgaGVpZ2h0PSIxMjgiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CiA8Zz4KICA8cmVjdCBmaWxsPSIjQ0NDIiBoZWlnaHQ9IjEyOCIgd2lkdGg9IjEyOCIvPgogIDx0ZXh0IGZpbGw9ImJsYWNrIiB5PSIxMDciIHg9IjM1LjUiIGZvbnQtc2l6ZT0iMTI4Ij4/PC90ZXh0PgogPC9nPgo8L3N2Zz4K\")","'use strict'\n\nmodule.exports = function (base64Data) {\n  var isBrowser = typeof window !== 'undefined' && typeof window.atob === 'function'\n  var binary = isBrowser ? window.atob(base64Data) : Buffer.from(base64Data, 'base64').toString('binary')\n  var bytes = new Uint8Array(binary.length)\n\n  for (var i = 0; i < binary.length; ++i) {\n    bytes[i] = binary.charCodeAt(i)\n  }\n\n  return bytes.buffer\n}\n","function M() { this._events = {}; }\nM.prototype = {\n  on: function(ev, cb) {\n    this._events || (this._events = {});\n    var e = this._events;\n    (e[ev] || (e[ev] = [])).push(cb);\n    return this;\n  },\n  removeListener: function(ev, cb) {\n    var e = this._events[ev] || [], i;\n    for(i = e.length-1; i >= 0 && e[i]; i--){\n      if(e[i] === cb || e[i].cb === cb) { e.splice(i, 1); }\n    }\n  },\n  removeAllListeners: function(ev) {\n    if(!ev) { this._events = {}; }\n    else { this._events[ev] && (this._events[ev] = []); }\n  },\n  listeners: function(ev) {\n    return (this._events ? this._events[ev] || [] : []);\n  },\n  emit: function(ev) {\n    this._events || (this._events = {});\n    var args = Array.prototype.slice.call(arguments, 1), i, e = this._events[ev] || [];\n    for(i = e.length-1; i >= 0 && e[i]; i--){\n      e[i].apply(this, args);\n    }\n    return this;\n  },\n  when: function(ev, cb) {\n    return this.once(ev, cb, true);\n  },\n  once: function(ev, cb, when) {\n    if(!cb) return this;\n    function c() {\n      if(!when) this.removeListener(ev, c);\n      if(cb.apply(this, arguments) && when) this.removeListener(ev, c);\n    }\n    c.cb = cb;\n    this.on(ev, c);\n    return this;\n  }\n};\nM.mixin = function(dest) {\n  var o = M.prototype, k;\n  for (k in o) {\n    o.hasOwnProperty(k) && (dest.prototype[k] = o[k]);\n  }\n};\nmodule.exports = M;\n","// default filter\nvar Transform = require('./transform.js');\n\nvar levelMap = { debug: 1, info: 2, warn: 3, error: 4 };\n\nfunction Filter() {\n  this.enabled = true;\n  this.defaultResult = true;\n  this.clear();\n}\n\nTransform.mixin(Filter);\n\n// allow all matching, with level >= given level\nFilter.prototype.allow = function(name, level) {\n  this._white.push({ n: name, l: levelMap[level] });\n  return this;\n};\n\n// deny all matching, with level <= given level\nFilter.prototype.deny = function(name, level) {\n  this._black.push({ n: name, l: levelMap[level] });\n  return this;\n};\n\nFilter.prototype.clear = function() {\n  this._white = [];\n  this._black = [];\n  return this;\n};\n\nfunction test(rule, name) {\n  // use .test for RegExps\n  return (rule.n.test ? rule.n.test(name) : rule.n == name);\n};\n\nFilter.prototype.test = function(name, level) {\n  var i, len = Math.max(this._white.length, this._black.length);\n  for(i = 0; i < len; i++) {\n    if(this._white[i] && test(this._white[i], name) && levelMap[level] >= this._white[i].l) {\n      return true;\n    }\n    if(this._black[i] && test(this._black[i], name) && levelMap[level] <= this._black[i].l) {\n      return false;\n    }\n  }\n  return this.defaultResult;\n};\n\nFilter.prototype.write = function(name, level, args) {\n  if(!this.enabled || this.test(name, level)) {\n    return this.emit('item', name, level, args);\n  }\n};\n\nmodule.exports = Filter;\n","var Transform = require('./transform.js'),\n    Filter = require('./filter.js');\n\nvar log = new Transform(),\n    slice = Array.prototype.slice;\n\nexports = module.exports = function create(name) {\n  var o   = function() { log.write(name, undefined, slice.call(arguments)); return o; };\n  o.debug = function() { log.write(name, 'debug', slice.call(arguments)); return o; };\n  o.info  = function() { log.write(name, 'info',  slice.call(arguments)); return o; };\n  o.warn  = function() { log.write(name, 'warn',  slice.call(arguments)); return o; };\n  o.error = function() { log.write(name, 'error', slice.call(arguments)); return o; };\n  o.log   = o.debug; // for interface compliance with Node and browser consoles\n  o.suggest = exports.suggest;\n  o.format = log.format;\n  return o;\n};\n\n// filled in separately\nexports.defaultBackend = exports.defaultFormatter = null;\n\nexports.pipe = function(dest) {\n  return log.pipe(dest);\n};\n\nexports.end = exports.unpipe = exports.disable = function(from) {\n  return log.unpipe(from);\n};\n\nexports.Transform = Transform;\nexports.Filter = Filter;\n// this is the default filter that's applied when .enable() is called normally\n// you can bypass it completely and set up your own pipes\nexports.suggest = new Filter();\n\nexports.enable = function() {\n  if(exports.defaultFormatter) {\n    return log.pipe(exports.suggest) // filter\n              .pipe(exports.defaultFormatter) // formatter\n              .pipe(exports.defaultBackend); // backend\n  }\n  return log.pipe(exports.suggest) // filter\n            .pipe(exports.defaultBackend); // formatter\n};\n\n","var microee = require('microee');\n\n// Implements a subset of Node's stream.Transform - in a cross-platform manner.\nfunction Transform() {}\n\nmicroee.mixin(Transform);\n\n// The write() signature is different from Node's\n// --> makes it much easier to work with objects in logs.\n// One of the lessons from v1 was that it's better to target\n// a good browser rather than the lowest common denominator\n// internally.\n// If you want to use external streams, pipe() to ./stringify.js first.\nTransform.prototype.write = function(name, level, args) {\n  this.emit('item', name, level, args);\n};\n\nTransform.prototype.end = function() {\n  this.emit('end');\n  this.removeAllListeners();\n};\n\nTransform.prototype.pipe = function(dest) {\n  var s = this;\n  // prevent double piping\n  s.emit('unpipe', dest);\n  // tell the dest that it's being piped to\n  dest.emit('pipe', s);\n\n  function onItem() {\n    dest.write.apply(dest, Array.prototype.slice.call(arguments));\n  }\n  function onEnd() { !dest._isStdio && dest.end(); }\n\n  s.on('item', onItem);\n  s.on('end', onEnd);\n\n  s.when('unpipe', function(from) {\n    var match = (from === dest) || typeof from == 'undefined';\n    if(match) {\n      s.removeListener('item', onItem);\n      s.removeListener('end', onEnd);\n      dest.emit('unpipe');\n    }\n    return match;\n  });\n\n  return dest;\n};\n\nTransform.prototype.unpipe = function(from) {\n  this.emit('unpipe', from);\n  return this;\n};\n\nTransform.prototype.format = function(dest) {\n  throw new Error([\n    'Warning: .format() is deprecated in Minilog v2! Use .pipe() instead. For example:',\n    'var Minilog = require(\\'minilog\\');',\n    'Minilog',\n    '  .pipe(Minilog.backends.console.formatClean)',\n    '  .pipe(Minilog.backends.console);'].join('\\n'));\n};\n\nTransform.mixin = function(dest) {\n  var o = Transform.prototype, k;\n  for (k in o) {\n    o.hasOwnProperty(k) && (dest.prototype[k] = o[k]);\n  }\n};\n\nmodule.exports = Transform;\n","module.exports = require('./common/minilog.js');\n\nvar consoleLogger = require('./node/console.js');\n\n// if we are running inside Electron then use the web version of console.js\nvar isElectron = (typeof window !== 'undefined' && window.process && window.process.type === 'renderer');\nif (isElectron) {\n  consoleLogger = require('./web/console.js').minilog;\n}\n\n// intercept the pipe method and transparently wrap the stringifier, if the\n// destination is a Node core stream\n\nmodule.exports.Stringifier = require('./node/stringify.js');\n\nvar oldPipe = module.exports.pipe;\nmodule.exports.pipe = function(dest) {\n  if(dest instanceof require('stream')) {\n    return oldPipe.call(module.exports, new (module.exports.Stringifier)).pipe(dest);\n  } else {\n    return oldPipe.call(module.exports, dest);\n  }\n};\n\nmodule.exports.defaultBackend = consoleLogger;\nmodule.exports.defaultFormatter = consoleLogger.formatMinilog;\n\nmodule.exports.backends = {\n  redis: require('./node/redis.js'),\n  nodeConsole: consoleLogger,\n  console: consoleLogger\n};\n","var Transform = require('../common/transform.js');\n\nfunction ConsoleBackend() { }\n\nTransform.mixin(ConsoleBackend);\n\nConsoleBackend.prototype.write = function() {\n  console.log.apply(console, arguments);\n};\n\nvar e = new ConsoleBackend();\n\nvar levelMap = require('./formatters/util.js').levelMap;\n\ne.filterEnv = function() {\n  console.error('Minilog.backends.console.filterEnv is deprecated in Minilog v2.');\n  // return the instance of Minilog\n  return require('../common/minilog.js');\n};\n\ne.formatters = [\n    'formatClean', 'formatColor', 'formatNpm',\n    'formatLearnboost', 'formatMinilog', 'formatWithStack', 'formatTime'\n];\n\ne.formatClean = new (require('./formatters/clean.js'));\ne.formatColor = new (require('./formatters/color.js'));\ne.formatNpm = new (require('./formatters/npm.js'));\ne.formatLearnboost = new (require('./formatters/learnboost.js'));\ne.formatMinilog = new (require('./formatters/minilog.js'));\ne.formatWithStack = new (require('./formatters/withstack.js'));\ne.formatTime = new (require('./formatters/time.js'));\n\nmodule.exports = e;\n","var Transform = require('../../common/transform.js');\n\nfunction FormatClean() {}\n\nTransform.mixin(FormatClean);\n\nFormatClean.prototype.write = function(name, level, args) {\n  function pad(s) { return (s.toString().length == 1? '0'+s : s); }\n  this.emit('item', (name ? name + ' ' : '') + (level ? level + ' ' : '') + args.join(' '));\n};\n\nmodule.exports = FormatClean;\n","var Transform = require('../../common/transform.js'),\n    style = require('./util.js').style;\n\nfunction FormatColor() {}\n\nTransform.mixin(FormatColor);\n\nFormatColor.prototype.write = function(name, level, args) {\n  var colors = { debug: 'magenta', info: 'cyan', warn: 'yellow', error: 'red' };\n  function pad(s) { return (s.toString().length == 4? ' '+s : s); }\n  this.emit('item', (name ? name + ' ' : '')\n          + (level ? style('- ' + pad(level.toUpperCase()) + ' -', colors[level]) + ' ' : '')\n          + args.join(' '));\n};\n\nmodule.exports = FormatColor;\n","var Transform = require('../../common/transform.js'),\n    style = require('./util.js').style;\n\nfunction FormatLearnboost() {}\n\nTransform.mixin(FormatLearnboost);\n\nFormatLearnboost.prototype.write = function(name, level, args) {\n  var colors = { debug: 'grey', info: 'cyan', warn: 'yellow', error: 'red' };\n  this.emit('item', (name ? style(name +' ', 'grey') : '')\n          + (level ? style(level, colors[level]) + ' ' : '')\n          + args.join(' '));\n};\n\nmodule.exports = FormatLearnboost;\n","var Transform = require('../../common/transform.js'),\n    style = require('./util.js').style,\n    util = require('util');\n\nfunction FormatMinilog() {}\n\nTransform.mixin(FormatMinilog);\n\nFormatMinilog.prototype.write = function(name, level, args) {\n  var colors = { debug: 'blue', info: 'cyan', warn: 'yellow', error: 'red' };\n  this.emit('item', (name ? style(name +' ', 'grey') : '')\n            + (level ? style(level, colors[level]) + ' ' : '')\n            + args.map(function(item) {\n              return (typeof item == 'string' ? item : util.inspect(item, null, 3, true));\n            }).join(' '));\n};\n\nmodule.exports = FormatMinilog;\n","var Transform = require('../../common/transform.js');\n\nfunction FormatNpm() {}\n\nTransform.mixin(FormatNpm);\n\nFormatNpm.prototype.write = function(name, level, args) {\n  var out = {\n        debug: '\\033[34;40m' + 'debug' + '\\033[39m ',\n        info: '\\033[32m' + 'info'  + '\\033[39m  ',\n        warn: '\\033[30;41m' + 'WARN' + '\\033[0m  ',\n        error: '\\033[31;40m' + 'ERR!' + '\\033[0m  '\n      };\n  this.emit('item', (name ? '\\033[37;40m'+ name +'\\033[0m ' : '')\n          + (level && out[level]? out[level] : '')\n          + args.join(' '));\n};\n\nmodule.exports = FormatNpm;\n","var Transform = require('../../common/transform.js'),\n    style = require('./util.js').style,\n    util = require('util');\n\nfunction FormatTime() {}\n\nfunction timestamp() {\n  var d = new Date();\n  return ('0' + d.getDate()).slice(-2) + '-' +\n    ('0' + (d.getMonth() + 1)).slice(-2) + '-' +\n    d.getFullYear() + ' ' +\n    ('0' + d.getHours()).slice(-2) + ':' +\n    ('0' + d.getMinutes()).slice(-2) + ':' +\n    ('0' + d.getSeconds()).slice(-2) + '.' +\n    ('00' + d.getMilliseconds()).slice(-3);\n}\n\nTransform.mixin(FormatTime);\n\nFormatTime.prototype.write = function(name, level, args) {\n  var colors = { debug: 'blue', info: 'cyan', warn: 'yellow', error: 'red' };\n  this.emit('item', style(timestamp() +' ', 'grey')\n            + (name ? style(name +' ', 'grey') : '')\n            + (level ? style(level, colors[level]) + ' ' : '')\n            + args.map(function(item) {\n              return (typeof item == 'string' ? item : util.inspect(item, null, 3, true));\n            }).join(' '));\n};\n\nmodule.exports = FormatTime;\n","var styles = {\n    //styles\n    'bold'      : ['\\033[1m',  '\\033[22m'],\n    'italic'    : ['\\033[3m',  '\\033[23m'],\n    'underline' : ['\\033[4m',  '\\033[24m'],\n    'inverse'   : ['\\033[7m',  '\\033[27m'],\n    //grayscale\n    'white'     : ['\\033[37m', '\\033[39m'],\n    'grey'      : ['\\033[90m', '\\033[39m'],\n    'black'     : ['\\033[30m', '\\033[39m'],\n    //colors\n    'blue'      : ['\\033[34m', '\\033[39m'],\n    'cyan'      : ['\\033[36m', '\\033[39m'],\n    'green'     : ['\\033[32m', '\\033[39m'],\n    'magenta'   : ['\\033[35m', '\\033[39m'],\n    'red'       : ['\\033[31m', '\\033[39m'],\n    'yellow'    : ['\\033[33m', '\\033[39m']\n  };\n\nexports.levelMap = { debug: 1, info: 2, warn: 3, error: 4 };\n\nexports.style = function(str, style) {\n  return styles[style][0] + str + styles[style][1];\n}\n\n","var Transform = require('../../common/transform.js'),\n    style = require('./util.js').style;\n\nfunction FormatNpm() {}\n\nTransform.mixin(FormatNpm);\n\nfunction noop(a){\n  return a;\n}\n\nvar types = {\n  string: noop,\n  number: noop,\n  default: JSON.stringify.bind(JSON)\n};\n\nfunction stringify(args) {\n  return args.map(function(arg) {\n    return (types[typeof arg] || types.default)(arg);\n  });\n}\n\nFormatNpm.prototype.write = function(name, level, args) {\n  var colors = { debug: 'magenta', info: 'cyan', warn: 'yellow', error: 'red' };\n  function pad(s) { return (s.toString().length == 4? ' '+s : s); }\n  function getStack() {\n    var orig = Error.prepareStackTrace;\n    Error.prepareStackTrace = function (err, stack) {\n      return stack;\n    };\n    var err = new Error;\n    Error.captureStackTrace(err, arguments.callee);\n    var stack = err.stack;\n    Error.prepareStackTrace = orig;\n    return stack;\n  }\n\n  var frame = getStack()[5],\n      fileName = FormatNpm.fullPath ? frame.getFileName() : frame.getFileName().replace(/^.*\\/(.+)$/, '/$1');\n\n  this.emit('item', (name ? name + ' ' : '')\n          + (level ? style(pad(level), colors[level]) + ' ' : '')\n          + style(fileName + \":\" + frame.getLineNumber(), 'grey')\n          + ' '\n          + stringify(args).join(' '));\n};\n\nFormatNpm.fullPath = true;\n\nmodule.exports = FormatNpm;\n\n","function RedisBackend(options) {\n  this.client = options.client;\n  this.key = options.key;\n}\n\nRedisBackend.prototype.write = function(str) {\n  this.client.rpush(this.key, str);\n};\n\nRedisBackend.prototype.end = function() {};\n\nRedisBackend.prototype.clear = function(cb) {\n  this.client.del(this.key, cb);\n};\n\nmodule.exports = RedisBackend;\n","var Transform = require('../common/transform.js');\n\nfunction Stringify() {}\n\nTransform.mixin(Stringify);\n\nStringify.prototype.write = function(name, level, args) {\n  var result = [];\n  if(name) result.push(name);\n  if(level) result.push(level);\n  result = result.concat(args);\n  for(var i = 0; i < result.length; i++) {\n    if(result[i] && typeof result[i] == 'object') {\n      // Buffers in Node.js look bad when stringified\n      if(result[i].constructor && result[i].constructor.isBuffer) {\n        result[i] = result[i].toString();\n      } else {\n        try {\n          result[i] = JSON.stringify(result[i]);\n        } catch(stringifyError) {\n          // happens when an object has a circular structure\n          // do not throw an error, when printing, the toString() method of the object will be used\n        }\n      }\n    } else {\n      result[i] = result[i];\n    }\n  }\n  this.emit('item',  result.join(' ') + '\\n');\n};\n\nmodule.exports = Stringify;\n","var Transform = require('../common/transform.js');\n\nvar newlines = /\\n+$/,\n    logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  var i = args.length-1;\n  if (typeof console === 'undefined' || !console.log) {\n    return;\n  }\n  if(console.log.apply) {\n    return console.log.apply(console, [name, level].concat(args));\n  } else if(JSON && JSON.stringify) {\n    // console.log.apply is undefined in IE8 and IE9\n    // for IE8/9: make console.log at least a bit less awful\n    if(args[i] && typeof args[i] == 'string') {\n      args[i] = args[i].replace(newlines, '');\n    }\n    try {\n      for(i = 0; i < args.length; i++) {\n        args[i] = JSON.stringify(args[i]);\n      }\n    } catch(e) {}\n    console.log(args.join(' '));\n  }\n};\n\nlogger.formatters = ['color', 'minilog'];\nlogger.color = require('./formatters/color.js');\nlogger.minilog = require('./formatters/minilog.js');\n\nmodule.exports = logger;\n","var Transform = require('../../common/transform.js'),\n    color = require('./util.js');\n\nvar colors = { debug: ['cyan'], info: ['purple' ], warn: [ 'yellow', true ], error: [ 'red', true ] },\n    logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  var fn = console.log;\n  if(console[level] && console[level].apply) {\n    fn = console[level];\n    fn.apply(console, [ '%c'+name+' %c'+level, color('gray'), color.apply(color, colors[level])].concat(args));\n  }\n};\n\n// NOP, because piping the formatted logs can only cause trouble.\nlogger.pipe = function() { };\n\nmodule.exports = logger;\n","var Transform = require('../../common/transform.js'),\n    color = require('./util.js'),\n    colors = { debug: ['gray'], info: ['purple' ], warn: [ 'yellow', true ], error: [ 'red', true ] },\n    logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  var fn = console.log;\n  if(level != 'debug' && console[level]) {\n    fn = console[level];\n  }\n\n  var subset = [], i = 0;\n  if(level != 'info') {\n    for(; i < args.length; i++) {\n      if(typeof args[i] != 'string') break;\n    }\n    fn.apply(console, [ '%c'+name +' '+ args.slice(0, i).join(' '), color.apply(color, colors[level]) ].concat(args.slice(i)));\n  } else {\n    fn.apply(console, [ '%c'+name, color.apply(color, colors[level]) ].concat(args));\n  }\n};\n\n// NOP, because piping the formatted logs can only cause trouble.\nlogger.pipe = function() { };\n\nmodule.exports = logger;\n","var hex = {\n  black: '#000',\n  red: '#c23621',\n  green: '#25bc26',\n  yellow: '#bbbb00',\n  blue:  '#492ee1',\n  magenta: '#d338d3',\n  cyan: '#33bbc8',\n  gray: '#808080',\n  purple: '#708'\n};\nfunction color(fg, isInverse) {\n  if(isInverse) {\n    return 'color: #fff; background: '+hex[fg]+';';\n  } else {\n    return 'color: '+hex[fg]+';';\n  }\n}\n\nmodule.exports = color;\n","module.exports = function() {\n  return require(\"!!/home/travis/build/LLK/scratch-storage/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// define __esModule on exports\\n/******/ \\t__webpack_require__.r = function(exports) {\\n/******/ \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t}\\n/******/ \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t};\\n/******/\\n/******/ \\t// create a fake namespace object\\n/******/ \\t// mode & 1: value is a module id, require it\\n/******/ \\t// mode & 2: merge all properties of value into the ns\\n/******/ \\t// mode & 4: return value when already ns object\\n/******/ \\t// mode & 8|1: behave like require\\n/******/ \\t__webpack_require__.t = function(value, mode) {\\n/******/ \\t\\tif(mode & 1) value = __webpack_require__(value);\\n/******/ \\t\\tif(mode & 8) return value;\\n/******/ \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n/******/ \\t\\tvar ns = Object.create(null);\\n/******/ \\t\\t__webpack_require__.r(ns);\\n/******/ \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n/******/ \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n/******/ \\t\\treturn ns;\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = \\\"./node_modules/babel-loader/lib/index.js?!./src/FetchWorkerTool.worker.js\\\");\\n/******/ })\\n/************************************************************************/\\n/******/ ({\\n\\n/***/ \\\"./node_modules/babel-loader/lib/index.js?!./src/FetchWorkerTool.worker.js\\\":\\n/*!*******************************************************************************!*\\\\\\n  !*** ./node_modules/babel-loader/lib??ref--4!./src/FetchWorkerTool.worker.js ***!\\n  \\\\*******************************************************************************/\\n/*! no static exports found */\\n/***/ (function(module, exports) {\\n\\n/* eslint-env worker */\\nvar jobsActive = 0;\\nvar complete = [];\\nvar intervalId = null;\\n/**\\n * Register a step function.\\n *\\n * Step checks if there are completed jobs and if there are sends them to the\\n * parent. Then it checks the jobs count. If there are no further jobs, clear\\n * the step.\\n */\\n\\nvar registerStep = function registerStep() {\\n  intervalId = setInterval(function () {\\n    if (complete.length) {\\n      // Send our chunk of completed requests and instruct postMessage to\\n      // transfer the buffers instead of copying them.\\n      postMessage(complete.slice(), // Instruct postMessage that these buffers in the sent message\\n      // should use their Transferable trait. After the postMessage\\n      // call the \\\"buffers\\\" will still be in complete if you looked,\\n      // but they will all be length 0 as the data they reference has\\n      // been sent to the window. This lets us send a lot of data\\n      // without the normal postMessage behaviour of making a copy of\\n      // all of the data for the window.\\n      complete.map(function (response) {\\n        return response.buffer;\\n      }).filter(Boolean));\\n      complete.length = 0;\\n    }\\n\\n    if (jobsActive === 0) {\\n      clearInterval(intervalId);\\n      intervalId = null;\\n    }\\n  }, 1);\\n};\\n/**\\n * Receive a job from the parent and fetch the requested data.\\n * @param {object} options.job A job id, url, and options descriptor to perform.\\n */\\n\\n\\nvar onMessage = function onMessage(_ref) {\\n  var job = _ref.data;\\n\\n  if (jobsActive === 0 && !intervalId) {\\n    registerStep();\\n  }\\n\\n  jobsActive++;\\n  fetch(job.url, job.options).then(function (response) {\\n    return response.arrayBuffer();\\n  }).then(function (buffer) {\\n    return complete.push({\\n      id: job.id,\\n      buffer: buffer\\n    });\\n  }).catch(function (error) {\\n    return complete.push({\\n      id: job.id,\\n      error: error\\n    });\\n  }).then(function () {\\n    return jobsActive--;\\n  });\\n};\\n\\nif (self.fetch) {\\n  postMessage({\\n    support: {\\n      fetch: true\\n    }\\n  });\\n  self.addEventListener('message', onMessage);\\n} else {\\n  postMessage({\\n    support: {\\n      fetch: false\\n    }\\n  });\\n  self.addEventListener('message', function (_ref2) {\\n    var job = _ref2.data;\\n    postMessage([{\\n      id: job.id,\\n      error: new Error('fetch is unavailable')\\n    }]);\\n  });\\n}\\n\\n/***/ })\\n\\n/******/ });\\n//# sourceMappingURL=4816ce2aa9bf12df8b86.worker.js.map\", __webpack_public_path__ + \"4816ce2aa9bf12df8b86.worker.js\");\n};","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};","// Use JS implemented TextDecoder and TextEncoder if it is not provided by the\n// browser.\nlet _TextDecoder;\nlet _TextEncoder;\nif (typeof TextDecoder === 'undefined' || typeof TextEncoder === 'undefined') {\n    // Wait to require text-encoding until we _know_ its needed. This will save\n    // evaluating ~500kb of encoding indices that we do not need to evaluate if\n    // the browser provides TextDecoder and TextEncoder.\n    // eslint-disable-next-line global-require\n    const encoding = require('text-encoding');\n    _TextDecoder = encoding.TextDecoder;\n    _TextEncoder = encoding.TextEncoder;\n} else {\n    /* global TextDecoder TextEncoder */\n    _TextDecoder = TextDecoder;\n    _TextEncoder = TextEncoder;\n}\n\nconst md5 = require('js-md5');\n\nconst memoizedToString = (function () {\n    /**\n     * The maximum length of a chunk before encoding it into base64.\n     *\n     * 32766 is a multiple of 3 so btoa does not need to use padding characters\n     * except for the final chunk where that is fine. 32766 is also close to\n     * 32768 so it is close to a size an memory allocator would prefer.\n     * @const {number}\n     */\n    const BTOA_CHUNK_MAX_LENGTH = 32766;\n\n    /**\n     * An array cache of bytes to characters.\n     * @const {?Array.<string>}\n     */\n    let fromCharCode = null;\n\n    const strings = {};\n    return (assetId, data) => {\n        if (!strings.hasOwnProperty(assetId)) {\n            if (typeof btoa === 'undefined') {\n                // Use a library that does not need btoa to run.\n                /* eslint-disable-next-line global-require */\n                const base64js = require('base64-js');\n                strings[assetId] = base64js.fromByteArray(data);\n            } else {\n                // Native btoa is faster than javascript translation. Use js to\n                // create a \"binary\" string and btoa to encode it.\n                if (fromCharCode === null) {\n                    // Cache the first 256 characters for input byte values.\n                    fromCharCode = new Array(256);\n                    for (let i = 0; i < 256; i++) {\n                        fromCharCode[i] = String.fromCharCode(i);\n                    }\n                }\n\n                const {length} = data;\n                let s = '';\n                // Iterate over chunks of the binary data.\n                for (let i = 0, e = 0; i < length; i = e) {\n                    // Create small chunks to cause more small allocations and\n                    // less large allocations.\n                    e = Math.min(e + BTOA_CHUNK_MAX_LENGTH, length);\n                    let s_ = '';\n                    for (let j = i; j < e; j += 1) {\n                        s_ += fromCharCode[data[j]];\n                    }\n                    // Encode the latest chunk so the we create one big output\n                    // string instead of creating a big input string and then\n                    // one big output string.\n                    /* global btoa */\n                    s += btoa(s_);\n                }\n                strings[assetId] = s;\n            }\n        }\n        return strings[assetId];\n    };\n}());\n\nclass Asset {\n    /**\n     * Construct an Asset.\n     * @param {AssetType} assetType - The type of this asset (sound, image, etc.)\n     * @param {string} assetId - The ID of this asset.\n     * @param {DataFormat} [dataFormat] - The format of the data (WAV, PNG, etc.); required iff `data` is present.\n     * @param {Buffer} [data] - The in-memory data for this asset; optional.\n     * @param {bool} [generateId] - Whether to create id from an md5 hash of data\n     */\n    constructor (assetType, assetId, dataFormat, data, generateId) {\n        /** @type {AssetType} */\n        this.assetType = assetType;\n\n        /** @type {string} */\n        this.assetId = assetId;\n\n        this.setData(data, dataFormat || assetType.runtimeFormat, generateId);\n\n        /** @type {Asset[]} */\n        this.dependencies = [];\n    }\n\n    setData (data, dataFormat, generateId) {\n        if (data && !dataFormat) {\n            throw new Error('Data provided without specifying its format');\n        }\n\n        /** @type {DataFormat} */\n        this.dataFormat = dataFormat;\n\n        /** @type {Buffer} */\n        this.data = data;\n\n        if (generateId) this.assetId = md5(data);\n\n        // Mark as clean only if set is being called without generateId\n        // If a new id is being generated, mark this asset as not clean\n        this.clean = !generateId;\n    }\n\n    /**\n     * @returns {string} - This asset's data, decoded as text.\n     */\n    decodeText () {\n        const decoder = new _TextDecoder();\n        return decoder.decode(this.data);\n    }\n\n    /**\n     * Same as `setData` but encodes text first.\n     * @param {string} data - the text data to encode and store.\n     * @param {DataFormat} dataFormat - the format of the data (DataFormat.SVG for example).\n     * @param {bool} generateId - after setting data, set the id to an md5 of the data?\n     */\n    encodeTextData (data, dataFormat, generateId) {\n        const encoder = new _TextEncoder();\n        this.setData(encoder.encode(data), dataFormat, generateId);\n    }\n\n    /**\n     * @param {string} [contentType] - Optionally override the content type to be included in the data URI.\n     * @returns {string} - A data URI representing the asset's data.\n     */\n    encodeDataURI (contentType) {\n        contentType = contentType || this.assetType.contentType;\n        return `data:${contentType};base64,${memoizedToString(this.assetId, this.data)}`;\n    }\n}\n\nmodule.exports = Asset;\n","const DataFormat = require('./DataFormat');\n\n/**\n * Enumeration of the supported asset types.\n * @type {Object.<String,AssetType>}\n * @typedef {Object} AssetType - Information about a supported asset type.\n * @property {string} contentType - the MIME type associated with this kind of data. Useful for data URIs, etc.\n * @property {string} name - The human-readable name of this asset type.\n * @property {DataFormat} runtimeFormat - The default format used for runtime, in-memory storage of this asset. For\n *     example, a project stored in SB2 format on disk will be returned as JSON when loaded into memory.\n * @property {boolean} immutable - Indicates if the asset id is determined by the asset content.\n */\nconst AssetType = {\n    ImageBitmap: {\n        contentType: 'image/png',\n        name: 'ImageBitmap',\n        runtimeFormat: DataFormat.PNG,\n        immutable: true\n    },\n    ImageVector: {\n        contentType: 'image/svg+xml',\n        name: 'ImageVector',\n        runtimeFormat: DataFormat.SVG,\n        immutable: true\n    },\n    Project: {\n        contentType: 'application/json',\n        name: 'Project',\n        runtimeFormat: DataFormat.JSON,\n        immutable: false\n    },\n    Sound: {\n        contentType: 'audio/x-wav',\n        name: 'Sound',\n        runtimeFormat: DataFormat.WAV,\n        immutable: true\n    },\n    Sprite: {\n        contentType: 'application/json',\n        name: 'Sprite',\n        runtimeFormat: DataFormat.JSON,\n        immutable: true\n    }\n};\n\nmodule.exports = AssetType;\n","const md5 = require('js-md5');\n\nconst log = require('./log');\n\nconst Asset = require('./Asset');\nconst AssetType = require('./AssetType');\nconst DataFormat = require('./DataFormat');\nconst Helper = require('./Helper');\n\n/**\n * @typedef {object} BuiltinAssetRecord\n * @property {AssetType} type - The type of the asset.\n * @property {DataFormat} format - The format of the asset's data.\n * @property {?string} id - The asset's unique ID.\n * @property {Buffer} data - The asset's data.\n */\n\n/**\n * @type {BuiltinAssetRecord[]}\n */\nconst DefaultAssets = [\n    {\n        type: AssetType.ImageBitmap,\n        format: DataFormat.PNG,\n        id: null,\n        data: new Buffer(\n            require('!arraybuffer-loader!./builtins/defaultBitmap.png') // eslint-disable-line global-require\n        )\n    },\n    {\n        type: AssetType.Sound,\n        format: DataFormat.WAV,\n        id: null,\n        data: new Buffer(\n            require('!arraybuffer-loader!./builtins/defaultSound.wav') // eslint-disable-line global-require\n        )\n    },\n    {\n        type: AssetType.ImageVector,\n        format: DataFormat.SVG,\n        id: null,\n        data: new Buffer(\n            require('!arraybuffer-loader!./builtins/defaultVector.svg') // eslint-disable-line global-require\n        )\n    }\n];\n\n/**\n * @type {BuiltinAssetRecord[]}\n */\nconst BuiltinAssets = DefaultAssets.concat([\n]);\n\nclass BuiltinHelper extends Helper {\n    constructor (parent) {\n        super(parent);\n\n        /**\n         * In-memory storage for all built-in assets.\n         * @type {Object.<AssetType, AssetIdMap>} Maps asset type to a map of asset ID to actual assets.\n         * @typedef {Object.<string, BuiltinAssetRecord>} AssetIdMap - Maps asset ID to asset.\n         */\n        this.assets = {};\n\n        BuiltinAssets.forEach(assetRecord => {\n            assetRecord.id = this._store(assetRecord.type, assetRecord.format, assetRecord.data, assetRecord.id);\n        });\n    }\n\n    /**\n     * Call `setDefaultAssetId` on the parent `ScratchStorage` instance to register all built-in default assets.\n     */\n    registerDefaultAssets () {\n        const numAssets = DefaultAssets.length;\n        for (let assetIndex = 0; assetIndex < numAssets; ++assetIndex) {\n            const assetRecord = DefaultAssets[assetIndex];\n            this.parent.setDefaultAssetId(assetRecord.type, assetRecord.id);\n        }\n    }\n\n\n    /**\n     * Synchronously fetch a cached asset for a given asset id. Returns null if not found.\n     * @param {string} assetId - The id for the asset to fetch.\n     * @returns {?Asset} The asset for assetId, if it exists.\n     */\n    get (assetId) {\n        let asset = null;\n        if (this.assets.hasOwnProperty(assetId)) {\n            /** @type{BuiltinAssetRecord} */\n            const assetRecord = this.assets[assetId];\n            asset = new Asset(assetRecord.type, assetRecord.id, assetRecord.format, assetRecord.data);\n        }\n        return asset;\n    }\n\n    /**\n     * Alias for store (old name of store)\n     * @deprecated Use BuiltinHelper.store\n     * @param {AssetType} assetType - The type of the asset to cache.\n     * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {string} id - The id for the cached asset.\n     * @returns {string} The calculated id of the cached asset, or the supplied id if the asset is mutable.\n     */\n    cache (assetType, dataFormat, data, id) {\n        log.warn('Deprecation: BuiltinHelper.cache has been replaced with BuiltinHelper.store.');\n        return this.store(assetType, dataFormat, data, id);\n    }\n\n    /**\n     * Deprecated external API for _store\n     * @deprecated Not for external use. Create assets and keep track of them outside of the storage instance.\n     * @param {AssetType} assetType - The type of the asset to cache.\n     * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {(string|number)} id - The id for the cached asset.\n     * @returns {string} The calculated id of the cached asset, or the supplied id if the asset is mutable.\n     */\n    store (assetType, dataFormat, data, id) {\n        log.warn('Deprecation: use Storage.createAsset. BuiltinHelper is for internal use only.');\n        return this._store(assetType, dataFormat, data, id);\n    }\n\n    /**\n     * Cache an asset for future lookups by ID.\n     * @param {AssetType} assetType - The type of the asset to cache.\n     * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {(string|number)} id - The id for the cached asset.\n     * @returns {string} The calculated id of the cached asset, or the supplied id if the asset is mutable.\n     */\n    _store (assetType, dataFormat, data, id) {\n        if (!dataFormat) throw new Error('Data cached without specifying its format');\n        if (id !== '' && id !== null && typeof id !== 'undefined') {\n            if (this.assets.hasOwnProperty(id) && assetType.immutable) return id;\n        } else if (assetType.immutable) {\n            id = md5(data);\n        } else {\n            throw new Error('Tried to cache data without an id');\n        }\n        this.assets[id] = {\n            type: assetType,\n            format: dataFormat,\n            id: id,\n            data: data\n        };\n        return id;\n    }\n\n    /**\n     * Fetch an asset but don't process dependencies.\n     * @param {AssetType} assetType - The type of asset to fetch.\n     * @param {string} assetId - The ID of the asset to fetch: a project ID, MD5, etc.\n     * @return {?Promise.<Asset>} A promise for the contents of the asset.\n     */\n    load (assetType, assetId) {\n        if (!this.get(assetId)) {\n            // Return null immediately so Storage can quickly move to trying the\n            // next helper.\n            return null;\n        }\n        return Promise.resolve(this.get(assetId));\n    }\n}\n\nmodule.exports = BuiltinHelper;\n","/**\n * Enumeration of the supported data formats.\n * @enum {string}\n */\nconst DataFormat = {\n    JPG: 'jpg',\n    JSON: 'json',\n    MP3: 'mp3',\n    PNG: 'png',\n    SB2: 'sb2',\n    SB3: 'sb3',\n    SVG: 'svg',\n    WAV: 'wav'\n};\n\nmodule.exports = DataFormat;\n","/* eslint-env browser */\n\n/**\n * Get and send assets with the fetch standard web api.\n */\nclass FetchTool {\n    /**\n     * Is get supported? false if the environment does not support fetch.\n     * @returns {boolean} Is get supported?\n     */\n    get isGetSupported () {\n        return typeof fetch !== 'undefined';\n    }\n\n    /**\n     * Request data from a server with fetch.\n     * @param {{url:string}} reqConfig - Request configuration for data to get.\n     * @param {{method:string}} options - Additional options to configure fetch.\n     * @returns {Promise.<Uint8Array>} Resolve to Buffer of data from server.\n     */\n    get ({url, ...options}) {\n        return fetch(url, Object.assign({method: 'GET'}, options))\n            .then(result => result.arrayBuffer())\n            .then(body => new Uint8Array(body));\n    }\n\n    /**\n     * Is sending supported? false if the environment does not support sending\n     * with fetch.\n     * @returns {boolean} Is sending supported?\n     */\n    get isSendSupported () {\n        return typeof fetch !== 'undefined';\n    }\n\n    /**\n     * Send data to a server with fetch.\n     * @param {Request} reqConfig - Request configuration for data to send.\n     * @returns {Promise.<string>} Server returned metadata.\n     */\n    send ({url, withCredentials = false, ...options}) {\n        return fetch(url, Object.assign({\n            credentials: withCredentials ? 'include' : 'omit'\n        }, options))\n            .then(result => result.text());\n    }\n}\n\nmodule.exports = FetchTool;\n","/**\n * Get and send assets with a worker that uses fetch.\n */\nclass PrivateFetchWorkerTool {\n    constructor () {\n        /**\n         * What does the worker support of the APIs we need?\n         * @type {{fetch:boolean}}\n         */\n        this._workerSupport = {\n            fetch: typeof fetch !== 'undefined'\n        };\n\n        /**\n         * A possible error occurred standing up the worker.\n         * @type {!Error}\n         */\n        this._supportError = null;\n\n        /**\n         * The worker that runs fetch and returns data for us.\n         * @type {!Worker}\n         */\n        this.worker = null;\n\n        /**\n         * A map of ids to fetch job objects.\n         * @type {object}\n         */\n        this.jobs = {};\n\n        try {\n            if (this.isGetSupported) {\n                // eslint-disable-next-line global-require\n                const FetchWorker = require('worker-loader?{\"inline\":true,\"fallback\":true}!./FetchWorkerTool.worker');\n\n                this.worker = new FetchWorker();\n\n                this.worker.addEventListener('message', ({data}) => {\n                    if (data.support) {\n                        this._workerSupport = data.support;\n                        return;\n                    }\n                    for (const message of data) {\n                        if (this.jobs[message.id]) {\n                            if (message.error) {\n                                this.jobs[message.id].reject(message.error);\n                            } else {\n                                this.jobs[message.id].resolve(message.buffer);\n                            }\n                            delete this.jobs[message.id];\n                        }\n                    }\n                });\n            }\n        } catch (error) {\n            this._supportError = error;\n        }\n    }\n\n    /**\n     * Is get supported?\n     *\n     * false if the environment does not workers, fetch, or fetch from inside a\n     * worker. Finding out the worker supports fetch is asynchronous and will\n     * guess that it does if the window does until the worker can inform us.\n     * @returns {boolean} Is get supported?\n     */\n    get isGetSupported () {\n        return (\n            typeof Worker !== 'undefined' &&\n            this._workerSupport.fetch &&\n            !this._supportError\n        );\n    }\n\n    /**\n     * Request data from a server with a worker using fetch.\n     * @param {{url:string}} reqConfig - Request configuration for data to get.\n     * @param {{method:string}} options - Additional options to configure fetch.\n     * @returns {Promise.<Buffer>} Resolve to Buffer of data from server.\n     */\n    get ({url, ...options}) {\n        return new Promise((resolve, reject) => {\n            // TODO: Use a Scratch standard ID generator ...\n            const id = Math.random().toString(16)\n                .substring(2);\n            this.worker.postMessage({\n                id,\n                url,\n                options: Object.assign({method: 'GET'}, options)\n            });\n            this.jobs[id] = {\n                id,\n                resolve,\n                reject\n            };\n        })\n            .then(body => new Uint8Array(body));\n    }\n\n    /**\n     * Is sending supported? always false for FetchWorkerTool.\n     * @returns {boolean} Is sending supported?\n     */\n    get isSendSupported () {\n        return false;\n    }\n\n    /**\n     * Send data to a server with nets.\n     * @throws {Error} A not implemented error.\n     */\n    send () {\n        throw new Error('Not implemented.');\n    }\n\n    /**\n     * Return a static PrivateFetchWorkerTool instance on demand.\n     * @returns {PrivateFetchWorkerTool} A static PrivateFetchWorkerTool\n     *   instance\n     */\n    static get instance () {\n        if (!this._instance) {\n            this._instance = new PrivateFetchWorkerTool();\n        }\n        return this._instance;\n    }\n}\n\n/**\n * Get and send assets with a worker that uses fetch.\n */\nclass PublicFetchWorkerTool {\n    constructor () {\n        /**\n         * Shared instance of an internal worker. PublicFetchWorkerTool proxies\n         * it.\n         * @type {PrivateFetchWorkerTool}\n         */\n        this.inner = PrivateFetchWorkerTool.instance;\n    }\n\n    /**\n     * Is get supported?\n     * @returns {boolean} Is get supported?\n     */\n    get isGetSupported () {\n        return this.inner.isGetSupported;\n    }\n\n    /**\n     * Request data from a server with a worker that uses fetch.\n     * @param {{url:string}} reqConfig - Request configuration for data to get.\n     * @returns {Promise.<Buffer>} Resolve to Buffer of data from server.\n     */\n    get (reqConfig) {\n        return this.inner.get(reqConfig);\n    }\n\n    /**\n     * Is sending supported?\n     * @returns {boolean} Is sending supported?\n     */\n    get isSendSupported () {\n        return false;\n    }\n\n    /**\n     * Send data to a server with a worker that uses fetch.\n     * @throws {Error} A not implemented error.\n     */\n    send () {\n        throw new Error('Not implemented.');\n    }\n}\n\nmodule.exports = PublicFetchWorkerTool;\n","/**\n * Base class for asset load/save helpers.\n * @abstract\n */\nclass Helper {\n    constructor (parent) {\n        this.parent = parent;\n    }\n\n    /**\n     * Fetch an asset but don't process dependencies.\n     * @param {AssetType} assetType - The type of asset to fetch.\n     * @param {string} assetId - The ID of the asset to fetch: a project ID, MD5, etc.\n     * @param {DataFormat} dataFormat - The file format / file extension of the asset to fetch: PNG, JPG, etc.\n     * @return {Promise.<Asset>} A promise for the contents of the asset.\n     */\n    load (assetType, assetId, dataFormat) {\n        return Promise.reject(new Error(`No asset of type ${assetType} for ID ${assetId} with format ${dataFormat}`));\n    }\n}\n\nmodule.exports = Helper;\n","/**\n * Get and send assets with the npm nets package.\n */\nclass NetsTool {\n    /**\n     * Is get supported? false if the environment does not support nets.\n     * @returns {boolean} Is get supported?\n     */\n    get isGetSupported () {\n        return true;\n    }\n\n    /**\n     * Request data from a server with nets.\n     * @param {{url:string}} reqConfig - Request configuration for data to get.\n     * @returns {Promise.<Buffer>} Resolve to Buffer of data from server.\n     */\n    get (reqConfig) {\n        return new Promise((resolve, reject) => {\n            /* eslint global-require:0 */\n            // Wait to evaluate nets and its dependencies until we know we need\n            // it as NetsTool may never be used if fetch is available.\n            const nets = require('nets');\n\n            nets(Object.assign({\n                method: 'get'\n            }, reqConfig), (err, resp, body) => {\n                // body is a Buffer\n                if (err || Math.floor(resp.statusCode / 100) !== 2) {\n                    reject(err || resp.statusCode);\n                } else {\n                    resolve(body);\n                }\n            });\n        });\n    }\n\n    /**\n     * Is sending supported? false if the environment does not support sending\n     * with nets.\n     * @returns {boolean} Is sending supported?\n     */\n    get isSendSupported () {\n        return true;\n    }\n\n    /**\n     * Send data to a server with nets.\n     * @param {Request} reqConfig - Request configuration for data to send.\n     * @returns {Promise.<Buffer|string|object>} Server returned metadata.\n     */\n    send (reqConfig) {\n        return new Promise((resolve, reject) => {\n            // eslint-disable-next-lint global-require\n            // Wait to evaluate nets and its dependencies until we know we need\n            // it as NetsTool may never be used if fetch is available.\n            const nets = require('nets');\n\n            nets(Object.assign({\n                encoding: undefined // eslint-disable-line no-undefined\n            }, reqConfig), (err, resp, body) => {\n                if (err || Math.floor(resp.statusCode / 100) !== 2) {\n                    reject(err || resp.statusCode);\n                } else {\n                    resolve(body);\n                }\n            });\n        });\n    }\n}\n\nmodule.exports = NetsTool;\n","const FetchWorkerTool = require('./FetchWorkerTool');\nconst FetchTool = require('./FetchTool');\nconst NetsTool = require('./NetsTool');\n\n/**\n * @typedef {object} Request\n * @property {string} url\n * @property {*} body\n * @property {string} method\n * @property {boolean} withCredentials\n */\n\n/**\n * Get and send assets with other tools in sequence.\n */\nclass ProxyTool {\n    constructor (filter = ProxyTool.TOOL_FILTER.ALL) {\n        let tools;\n        if (filter === ProxyTool.TOOL_FILTER.READY) {\n            tools = [new FetchTool(), new NetsTool()];\n        } else {\n            tools = [new FetchWorkerTool(), new FetchTool(), new NetsTool()];\n        }\n\n        /**\n         * Sequence of tools to proxy.\n         * @type {Array.<Tool>}\n         */\n        this.tools = tools;\n    }\n\n    /**\n     * Is get supported? false if all proxied tool return false.\n     * @returns {boolean} Is get supported?\n     */\n    get isGetSupported () {\n        return this.tools.some(tool => tool.isGetSupported);\n    }\n\n    /**\n     * Request data from with one of the proxied tools.\n     * @param {Request} reqConfig - Request configuration for data to get.\n     * @returns {Promise.<Buffer>} Resolve to Buffer of data from server.\n     */\n    get (reqConfig) {\n        let toolIndex = 0;\n        const nextTool = err => {\n            const tool = this.tools[toolIndex++];\n            if (!tool) {\n                throw err;\n            }\n            if (!tool.isGetSupported) {\n                return nextTool(err);\n            }\n            return tool.get(reqConfig).catch(nextTool);\n        };\n        return nextTool();\n    }\n\n    /**\n     * Is sending supported? false if all proxied tool return false.\n     * @returns {boolean} Is sending supported?\n     */\n    get isSendSupported () {\n        return this.tools.some(tool => tool.isSendSupported);\n    }\n\n    /**\n     * Send data to a server with one of the proxied tools.\n     * @param {Request} reqConfig - Request configuration for data to send.\n     * @returns {Promise.<Buffer|string|object>} Server returned metadata.\n     */\n    send (reqConfig) {\n        let toolIndex = 0;\n        const nextTool = err => {\n            const tool = this.tools[toolIndex++];\n            if (!tool) {\n                throw err;\n            }\n            if (!tool.isSendSupported) {\n                return nextTool(err);\n            }\n            return tool.send(reqConfig).catch(nextTool);\n        };\n        return nextTool();\n    }\n}\n\n/**\n * Constant values that filter the set of tools in a ProxyTool instance.\n * @enum {string}\n */\nProxyTool.TOOL_FILTER = {\n    /**\n     * Use all tools.\n     */\n    ALL: 'all',\n\n    /**\n     * Use tools that are ready right now.\n     */\n    READY: 'ready'\n};\n\nmodule.exports = ProxyTool;\n","const log = require('./log');\n\nconst BuiltinHelper = require('./BuiltinHelper');\nconst WebHelper = require('./WebHelper');\n\nconst _Asset = require('./Asset');\nconst _AssetType = require('./AssetType');\nconst _DataFormat = require('./DataFormat');\n\nclass ScratchStorage {\n    constructor () {\n        this.defaultAssetId = {};\n\n        this.builtinHelper = new BuiltinHelper(this);\n        this.webHelper = new WebHelper(this);\n        this.builtinHelper.registerDefaultAssets(this);\n\n        this._helpers = [\n            {\n                helper: this.builtinHelper,\n                priority: 100\n            },\n            {\n                helper: this.webHelper,\n                priority: -100\n            }\n        ];\n    }\n\n    /**\n     * @return {Asset} - the `Asset` class constructor.\n     * @constructor\n     */\n    get Asset () {\n        return _Asset;\n    }\n\n    /**\n     * @return {AssetType} - the list of supported asset types.\n     * @constructor\n     */\n    get AssetType () {\n        return _AssetType;\n    }\n\n    /**\n     * @return {DataFormat} - the list of supported data formats.\n     * @constructor\n     */\n    get DataFormat () {\n        return _DataFormat;\n    }\n\n    /**\n     * @deprecated Please use the `Asset` member of a storage instance instead.\n     * @return {Asset} - the `Asset` class constructor.\n     * @constructor\n     */\n    static get Asset () {\n        return _Asset;\n    }\n\n    /**\n     * @deprecated Please use the `AssetType` member of a storage instance instead.\n     * @return {AssetType} - the list of supported asset types.\n     * @constructor\n     */\n    static get AssetType () {\n        return _AssetType;\n    }\n\n    /**\n     * Add a storage helper to this manager. Helpers with a higher priority number will be checked first when loading\n     * or storing assets. For comparison, the helper for built-in assets has `priority=100` and the default web helper\n     * has `priority=-100`. The relative order of helpers with equal priorities is undefined.\n     * @param {Helper} helper - the helper to be added.\n     * @param {number} [priority] - the priority for this new helper (default: 0).\n     */\n    addHelper (helper, priority = 0) {\n        this._helpers.push({helper, priority});\n        this._helpers.sort((a, b) => b.priority - a.priority);\n    }\n\n    /**\n     * Synchronously fetch a cached asset from built-in storage. Assets are cached when they are loaded.\n     * @param {string} assetId - The id of the asset to fetch.\n     * @returns {?Asset} The asset, if it exists.\n     */\n    get (assetId) {\n        return this.builtinHelper.get(assetId);\n    }\n\n    /**\n     * Deprecated API for caching built-in assets. Use createAsset.\n     * @param {AssetType} assetType - The type of the asset to cache.\n     * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {string} id - The id for the cached asset.\n     * @returns {string} The calculated id of the cached asset, or the supplied id if the asset is mutable.\n     */\n    cache (assetType, dataFormat, data, id) {\n        log.warn('Deprecation: Storage.cache is deprecated. Use Storage.createAsset, and store assets externally.');\n        return this.builtinHelper._store(assetType, dataFormat, data, id);\n    }\n\n    /**\n     * Construct an Asset, and optionally generate an md5 hash of its data to create an id\n     * @param {AssetType} assetType - The type of the asset to cache.\n     * @param {DataFormat} dataFormat - The dataFormat of the data for the cached asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {string} [id] - The id for the cached asset.\n     * @param {bool} [generateId] - flag to set id to an md5 hash of data if `id` isn't supplied\n     * @returns {Asset} generated Asset with `id` attribute set if not supplied\n     */\n    createAsset (assetType, dataFormat, data, id, generateId) {\n        if (!dataFormat) throw new Error('Tried to create asset without a dataFormat');\n        return new _Asset(assetType, id, dataFormat, data, generateId);\n    }\n\n    /**\n     * Register a web-based source for assets. Sources will be checked in order of registration.\n     * @param {Array.<AssetType>} types - The types of asset provided by this source.\n     * @param {UrlFunction} getFunction - A function which computes a GET URL from an Asset.\n     * @param {UrlFunction} createFunction - A function which computes a POST URL for asset data.\n     * @param {UrlFunction} updateFunction - A function which computes a PUT URL for asset data.\n     */\n    addWebStore (types, getFunction, createFunction, updateFunction) {\n        this.webHelper.addStore(types, getFunction, createFunction, updateFunction);\n    }\n\n    /**\n     * Register a web-based source for assets. Sources will be checked in order of registration.\n     * @deprecated Please use addWebStore\n     * @param {Array.<AssetType>} types - The types of asset provided by this source.\n     * @param {UrlFunction} urlFunction - A function which computes a GET URL from an Asset.\n     */\n    addWebSource (types, urlFunction) {\n        log.warn('Deprecation: Storage.addWebSource has been replaced by addWebStore.');\n        this.addWebStore(types, urlFunction);\n    }\n\n    /**\n     * TODO: Should this be removed in favor of requesting an asset with `null` as the ID?\n     * @param {AssetType} type - Get the default ID for assets of this type.\n     * @return {?string} The ID of the default asset of the given type, if any.\n     */\n    getDefaultAssetId (type) {\n        if (this.defaultAssetId.hasOwnProperty(type.name)) {\n            return this.defaultAssetId[type.name];\n        }\n    }\n\n    /**\n     * Set the default ID for a particular type of asset. This default asset will be used if a requested asset cannot\n     * be found and automatic fallback is enabled. Ideally this should be an asset that is available locally or even\n     * one built into this module.\n     * TODO: Should this be removed in favor of requesting an asset with `null` as the ID?\n     * @param {AssetType} type - The type of asset for which the default will be set.\n     * @param {string} id - The default ID to use for this type of asset.\n     */\n    setDefaultAssetId (type, id) {\n        this.defaultAssetId[type.name] = id;\n    }\n\n    /**\n     * Fetch an asset by type & ID.\n     * @param {AssetType} assetType - The type of asset to fetch. This also determines which asset store to use.\n     * @param {string} assetId - The ID of the asset to fetch: a project ID, MD5, etc.\n     * @param {DataFormat} [dataFormat] - Optional: load this format instead of the AssetType's default.\n     * @return {Promise.<Asset>} A promise for the requested Asset.\n     *   If the promise is resolved with non-null, the value is the requested asset or a fallback.\n     *   If the promise is resolved with null, the desired asset could not be found with the current asset sources.\n     *   If the promise is rejected, there was an error on at least one asset source. HTTP 404 does not count as an\n     *   error here, but (for example) HTTP 403 does.\n     */\n    load (assetType, assetId, dataFormat) {\n        /** @type {Helper[]} */\n        const helpers = this._helpers.map(x => x.helper);\n        const errors = [];\n        dataFormat = dataFormat || assetType.runtimeFormat;\n\n        let helperIndex = 0;\n        let helper;\n        const tryNextHelper = err => {\n            if (err) {\n                errors.push(err);\n            }\n\n            helper = helpers[helperIndex++];\n\n            if (helper) {\n                const loading = helper.load(assetType, assetId, dataFormat);\n                if (loading === null) {\n                    return tryNextHelper();\n                }\n                // Note that other attempts may have logged errors; if this succeeds they will be suppressed.\n                return loading\n                    // TODO: maybe some types of error should prevent trying the next helper?\n                    .catch(tryNextHelper);\n            } else if (errors.length > 0) {\n                // At least one thing went wrong and also we couldn't find the\n                // asset.\n                return Promise.reject(errors);\n            }\n\n            // Nothing went wrong but we couldn't find the asset.\n            return Promise.resolve(null);\n        };\n\n        return tryNextHelper();\n    }\n\n    /**\n     * Store an asset by type & ID.\n     * @param {AssetType} assetType - The type of asset to fetch. This also determines which asset store to use.\n     * @param {?DataFormat} [dataFormat] - Optional: load this format instead of the AssetType's default.\n     * @param {Buffer} data - Data to store for the asset\n     * @param {?string} [assetId] - The ID of the asset to fetch: a project ID, MD5, etc.\n     * @return {Promise.<object>} A promise for asset metadata\n     */\n    store (assetType, dataFormat, data, assetId) {\n        dataFormat = dataFormat || assetType.runtimeFormat;\n        return new Promise(\n            (resolve, reject) =>\n                this.webHelper.store(assetType, dataFormat, data, assetId)\n                    .then(body => {\n                        this.builtinHelper._store(assetType, dataFormat, data, body.id);\n                        return resolve(body);\n                    })\n                    .catch(error => reject(error))\n        );\n    }\n}\n\nmodule.exports = ScratchStorage;\n","const log = require('./log');\n\nconst Asset = require('./Asset');\nconst Helper = require('./Helper');\nconst ProxyTool = require('./ProxyTool');\n\nconst ensureRequestConfig = reqConfig => {\n    if (typeof reqConfig === 'string') {\n        return {\n            url: reqConfig\n        };\n    }\n    return reqConfig;\n};\n\n/**\n * @typedef {function} UrlFunction - A function which computes a URL from asset information.\n * @param {Asset} - The asset for which the URL should be computed.\n * @returns {(string|object)} - A string representing the URL for the asset request OR an object with configuration for\n *                              the underlying `nets` call (necessary for configuring e.g. authentication)\n */\n\nclass WebHelper extends Helper {\n    constructor (parent) {\n        super(parent);\n\n        /**\n         * @type {Array.<StoreRecord>}\n         * @typedef {object} StoreRecord\n         * @property {Array.<string>} types - The types of asset provided by this store, from AssetType's name field.\n         * @property {UrlFunction} getFunction - A function which computes a URL from an Asset.\n         * @property {UrlFunction} createFunction - A function which computes a URL from an Asset.\n         * @property {UrlFunction} updateFunction - A function which computes a URL from an Asset.\n         */\n        this.stores = [];\n\n        /**\n         * Set of tools to best load many assets in parallel. If one tool\n         * cannot be used, it will use the next.\n         * @type {ProxyTool}\n         */\n        this.assetTool = new ProxyTool();\n\n        /**\n         * Set of tools to best load project data in parallel with assets. This\n         * tool set prefers tools that are immediately ready. Some tools have\n         * to initialize before they can load files.\n         * @type {ProxyTool}\n         */\n        this.projectTool = new ProxyTool(ProxyTool.TOOL_FILTER.READY);\n    }\n\n    /**\n     * Register a web-based source for assets. Sources will be checked in order of registration.\n     * @deprecated Please use addStore\n     * @param {Array.<AssetType>} types - The types of asset provided by this source.\n     * @param {UrlFunction} urlFunction - A function which computes a URL from an Asset.\n     */\n    addSource (types, urlFunction) {\n        log.warn('Deprecation: WebHelper.addSource has been replaced with WebHelper.addStore.');\n        this.addStore(types, urlFunction);\n    }\n\n    /**\n     * Register a web-based store for assets. Sources will be checked in order of registration.\n     * @param {Array.<AssetType>} types - The types of asset provided by this store.\n     * @param {UrlFunction} getFunction - A function which computes a GET URL for an Asset\n     * @param {UrlFunction} createFunction - A function which computes a POST URL for an Asset\n     * @param {UrlFunction} updateFunction - A function which computes a PUT URL for an Asset\n     */\n    addStore (types, getFunction, createFunction, updateFunction) {\n        this.stores.push({\n            types: types.map(assetType => assetType.name),\n            get: getFunction,\n            create: createFunction,\n            update: updateFunction\n        });\n    }\n\n    /**\n     * Fetch an asset but don't process dependencies.\n     * @param {AssetType} assetType - The type of asset to fetch.\n     * @param {string} assetId - The ID of the asset to fetch: a project ID, MD5, etc.\n     * @param {DataFormat} dataFormat - The file format / file extension of the asset to fetch: PNG, JPG, etc.\n     * @return {Promise.<Asset>} A promise for the contents of the asset.\n     */\n    load (assetType, assetId, dataFormat) {\n\n        /** @type {Array.<{url:string, result:*}>} List of URLs attempted & errors encountered. */\n        const errors = [];\n        const stores = this.stores.slice()\n            .filter(store => store.types.indexOf(assetType.name) >= 0);\n        const asset = new Asset(assetType, assetId, dataFormat);\n\n        let tool = this.assetTool;\n        if (assetType.name === 'Project') {\n            tool = this.projectTool;\n        }\n\n        let storeIndex = 0;\n        const tryNextSource = () => {\n            const store = stores[storeIndex++];\n\n            /** @type {UrlFunction} */\n            const reqConfigFunction = store.get;\n\n            if (reqConfigFunction) {\n                const reqConfig = ensureRequestConfig(reqConfigFunction(asset));\n                if (reqConfig === false) {\n                    return tryNextSource();\n                }\n\n                return tool.get(reqConfig)\n                    .then(body => asset.setData(body, dataFormat))\n                    .catch(tryNextSource);\n            } else if (errors.length > 0) {\n                return Promise.reject(errors);\n            }\n\n            // no stores matching asset\n            return Promise.resolve(null);\n        };\n\n        return tryNextSource().then(() => asset);\n    }\n\n    /**\n     * Create or update an asset with provided data. The create function is called if no asset id is provided\n     * @param {AssetType} assetType - The type of asset to create or update.\n     * @param {?DataFormat} dataFormat - DataFormat of the data for the stored asset.\n     * @param {Buffer} data - The data for the cached asset.\n     * @param {?string} assetId - The ID of the asset to fetch: a project ID, MD5, etc.\n     * @return {Promise.<object>} A promise for the response from the create or update request\n     */\n    store (assetType, dataFormat, data, assetId) {\n        const asset = new Asset(assetType, assetId, dataFormat);\n        // If we have an asset id, we should update, otherwise create to get an id\n        const create = assetId === '' || assetId === null || typeof assetId === 'undefined';\n\n        // Use the first store with the appropriate asset type and url function\n        const store = this.stores.filter(s =>\n            // Only use stores for the incoming asset type\n            s.types.indexOf(assetType.name) !== -1 && (\n                // Only use stores that have a create function if this is a create request\n                // or an update function if this is an update request\n                (create && s.create) || s.update\n            )\n        )[0];\n\n        const method = create ? 'post' : 'put';\n\n        if (!store) return Promise.reject('No appropriate stores');\n\n        let tool = this.assetTool;\n        if (assetType.name === 'Project') {\n            tool = this.projectTool;\n        }\n\n        const reqConfig = ensureRequestConfig(\n            create ? store.create(asset) : store.update(asset)\n        );\n        const reqBodyConfig = Object.assign({body: data, method}, reqConfig);\n        return tool.send(reqBodyConfig)\n            .then(body => {\n                // xhr makes it difficult to both send FormData and\n                // automatically parse a JSON response. So try to parse\n                // everything as JSON.\n                if (typeof body === 'string') {\n                    try {\n                        body = JSON.parse(body);\n                    } catch (parseError) {\n                        // If it's not parseable, then we can't add the id even\n                        // if we want to, so stop here\n                        return body;\n                    }\n                }\n                return Object.assign({\n                    id: body['content-name'] || assetId\n                }, body);\n            });\n    }\n}\n\nmodule.exports = WebHelper;\n","const ScratchStorage = require('./ScratchStorage');\n\n/**\n * Export for use with NPM & Node.js.\n * @type {ScratchStorage}\n */\nmodule.exports = ScratchStorage;\n","const minilog = require('minilog');\nminilog.enable();\n\nmodule.exports = minilog('storage');\n","module.exports = require(\"base64-js\");","module.exports = require(\"js-md5\");","module.exports = require(\"nets\");","module.exports = require(\"stream\");","module.exports = require(\"text-encoding\");","module.exports = require(\"util\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AAEA;;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AACA;;;;;;;;AAQA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAEA;AACA;AAAA;AAEA;AAGA;AACA;AAAA;AACA;AAEA;;;;;;AAGA;AACA;AACA;AACA;AAEA;;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;;AAIA;AACA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;ACrJA;AAEA;;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAzBA;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;;;;;AAQA;;;;;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAJA;AASA;AACA;AACA;AACA;AAAA;AAJA;AASA;AACA;AACA;AACA;AAAA;AAJA;AAUA;;;;AAGA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;;;;;;AAKA;AAEA;AACA;AACA;AAZA;AAaA;AAEA;;;;;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;;;;AASA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AASA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;AA9GA;AACA;AAgHA;;;;;;;;;;;ACtKA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;;;AAGA;;;;;;;;;;AASA;;;;;;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;;;;;;;;;AASA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AACA;;;;AAvCA;;;;AAIA;AACA;AACA;;;AAmBA;AACA;AACA;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AChDA;;;AAGA;;;AACA;AAAA;AACA;AADA;AACA;AAAA;;;;AAIA;AACA;AADA;AAIA;;;;;AAIA;AAEA;;;;;AAIA;AAEA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAgBA;;;;;;AAMA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AACA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAEA;;;;;;;;AAQA;;;;AAIA;AACA;AACA;AAEA;;;;;;;;AAjDA;AACA;AAKA;;;AA+BA;AACA;AACA;;;AAeA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;AAGA;;;;;AAGA;;;AACA;AAAA;AACA;AAAA;;;;;AAKA;AACA;AAEA;;;;;;;;;AAQA;;;;;AAKA;AACA;AACA;AAEA;;;;;;;;AAQA;;;;AAIA;AACA;AACA;;;AA3BA;AACA;AACA;;;AAeA;AACA;AACA;;;;;;AAWA;;;;;;;;;;;;;;;;;ACjLA;;;;AAIA;;;AACA;AAAA;AACA;AAAA;AACA;AAEA;;;;;;;;;;;AAOA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;;;;;;;ACrBA;;;AAGA;;;;;;;;;;AASA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAhEA;;;;AAIA;AACA;AACA;;;AAgCA;AACA;AACA;;;;;;AA2BA;;;;;;;;;;;;;;;;;ACvEA;AACA;AAAA;AACA;AAAA;AAEA;;;;;;;;AAQA;;;;;AAGA;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AAEA;;;;;;;;;AAQA;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;AAQA;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;;;AAlDA;AACA;AAAA;AAAA;AACA;;;AA0BA;AACA;AAAA;AAAA;AACA;;;;;AAuBA;;;;;;AAIA;AACA;;;AAGA;AACA;AACA;;;AAGA;AATA;AAYA;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AAEA;;;;;;;;;AA0CA;;;;;;;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AASA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAOA;AACA;AACA;AAEA;;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAQA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAWA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAQA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AANA;AAQA;;;AAtMA;AACA;AACA;AAEA;;;;;;;AAIA;AACA;AACA;AAEA;;;;;;;AAIA;AACA;AACA;AAEA;;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;;AAKA;AACA;AACA;;;;;;AAqKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1OA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAEA;;;;;;;;AAOA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;;;;;;;;;AAQA;AAEA;;;;;;AAKA;AAEA;;;;;;;AAMA;AA1BA;AA2BA;AAEA;;;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAOA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAMA;AAEA;;;;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AALA;AAAA;AASA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;;;;AA9JA;AACA;AAgKA;;;;;;;;;;;ACvLA;AAEA;;;;;;AAIA;;;;;;;;;;;ACNA;AACA;AAAA;AAEA;;;;;;;;;;;ACHA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}