"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("./util");

var _default = {
  meta: {
    docs: {
      url: (0, _util.getDocsUrl)(__filename)
    },
    messages: {
      requireRethrow: 'Add an error message to {{ propertyName }}()'
    },
    schema: []
  },

  create(context) {
    return {
      CallExpression(node) {
        if (!(0, _util.expectCaseWithParent)(node)) {
          return;
        }

        let targetNode = (0, _util.method)(node);

        if (targetNode.name === 'rejects') {
          targetNode = (0, _util.method)(node.parent);
        }

        const propertyName = (0, _util.method)(targetNode) && (0, _util.method)(targetNode).name; // Look for `toThrow` calls with no arguments.

        if (['toThrow', 'toThrowError'].includes(propertyName) && !(0, _util.argument)(targetNode)) {
          context.report({
            messageId: 'requireRethrow',
            data: {
              propertyName
            },
            node: targetNode
          });
        }
      }

    };
  }

};
exports.default = _default;