{"version":3,"file":"react-tabs.production.min.js","sources":["../src/helpers/elementTypes.js","../src/helpers/childrenDeepMap.js","../src/components/UncontrolledTabs.js","../node_modules/classnames/index.js","../src/helpers/uuid.js","../src/helpers/count.js","../src/components/Tabs.js","../src/components/TabList.js","../src/components/Tab.js","../src/components/TabPanel.js"],"sourcesContent":["export function isTab(el) {\n  return el.type && el.type.tabsRole === 'Tab';\n}\n\nexport function isTabPanel(el) {\n  return el.type && el.type.tabsRole === 'TabPanel';\n}\n\nexport function isTabList(el) {\n  return el.type && el.type.tabsRole === 'TabList';\n}\n","import { Children, cloneElement } from 'react';\nimport { isTabPanel, isTab, isTabList } from './elementTypes';\n\nfunction isTabChild(child) {\n  return isTab(child) || isTabList(child) || isTabPanel(child);\n}\n\nexport function deepMap(children, callback) {\n  return Children.map(children, child => {\n    // null happens when conditionally rendering TabPanel/Tab\n    // see https://github.com/reactjs/react-tabs/issues/37\n    if (child === null) return null;\n\n    if (isTabChild(child)) {\n      return callback(child);\n    }\n\n    if (\n      child.props &&\n      child.props.children &&\n      typeof child.props.children === 'object'\n    ) {\n      // Clone the child that has children and map them too\n      return cloneElement(child, {\n        ...child.props,\n        children: deepMap(child.props.children, callback),\n      });\n    }\n\n    return child;\n  });\n}\n\nexport function deepForEach(children, callback) {\n  return Children.forEach(children, child => {\n    // null happens when conditionally rendering TabPanel/Tab\n    // see https://github.com/reactjs/react-tabs/issues/37\n    if (child === null) return;\n\n    if (isTab(child) || isTabPanel(child)) {\n      callback(child);\n    } else if (\n      child.props &&\n      child.props.children &&\n      typeof child.props.children === 'object'\n    ) {\n      if (isTabList(child)) callback(child);\n      deepForEach(child.props.children, callback);\n    }\n  });\n}\n","import PropTypes from 'prop-types';\nimport React, { cloneElement, Component } from 'react';\nimport cx from 'classnames';\nimport uuid from '../helpers/uuid';\nimport { childrenPropType } from '../helpers/propTypes';\nimport { getPanelsCount, getTabsCount } from '../helpers/count';\nimport { deepMap } from '../helpers/childrenDeepMap';\nimport { isTabList, isTabPanel, isTab } from '../helpers/elementTypes';\n\n// Determine if a node from event.target is a Tab element\nfunction isTabNode(node) {\n  return 'getAttribute' in node && node.getAttribute('role') === 'tab';\n}\n\n// Determine if a tab node is disabled\nfunction isTabDisabled(node) {\n  return node.getAttribute('aria-disabled') === 'true';\n}\n\nlet canUseActiveElement;\ntry {\n  canUseActiveElement = !!(\n    typeof window !== 'undefined' &&\n    window.document &&\n    window.document.activeElement\n  );\n} catch (e) {\n  // Work around for IE bug when accessing document.activeElement in an iframe\n  // Refer to the following resources:\n  // http://stackoverflow.com/a/10982960/369687\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12733599\n  canUseActiveElement = false;\n}\nexport default class UncontrolledTabs extends Component {\n  static defaultProps = {\n    className: 'react-tabs',\n    focus: false,\n  };\n\n  static propTypes = {\n    children: childrenPropType,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    disabledTabClassName: PropTypes.string,\n    domRef: PropTypes.func,\n    focus: PropTypes.bool,\n    forceRenderTabPanel: PropTypes.bool,\n    onSelect: PropTypes.func.isRequired,\n    selectedIndex: PropTypes.number.isRequired,\n    selectedTabClassName: PropTypes.string,\n    selectedTabPanelClassName: PropTypes.string,\n  };\n\n  tabNodes = [];\n\n  setSelected(index, event) {\n    // Check index boundary\n    if (index < 0 || index >= this.getTabsCount()) return;\n\n    const { onSelect, selectedIndex } = this.props;\n\n    // Call change event handler\n    onSelect(index, selectedIndex, event);\n  }\n\n  getNextTab(index) {\n    const count = this.getTabsCount();\n\n    // Look for non-disabled tab from index to the last tab on the right\n    for (let i = index + 1; i < count; i++) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // If no tab found, continue searching from first on left to index\n    for (let i = 0; i < index; i++) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // No tabs are disabled, return index\n    return index;\n  }\n\n  getPrevTab(index) {\n    let i = index;\n\n    // Look for non-disabled tab from index to first tab on the left\n    while (i--) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // If no tab found, continue searching from last tab on right to index\n    i = this.getTabsCount();\n    while (i-- > index) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // No tabs are disabled, return index\n    return index;\n  }\n\n  getFirstTab() {\n    const count = this.getTabsCount();\n\n    // Look for non disabled tab from the first tab\n    for (let i = 0; i < count; i++) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  getLastTab() {\n    let i = this.getTabsCount();\n\n    // Look for non disabled tab from the last tab\n    while (i--) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  getTabsCount() {\n    const { children } = this.props;\n    return getTabsCount(children);\n  }\n\n  getPanelsCount() {\n    const { children } = this.props;\n    return getPanelsCount(children);\n  }\n\n  getTab(index) {\n    return this.tabNodes[`tabs-${index}`];\n  }\n\n  getChildren() {\n    let index = 0;\n    const {\n      children,\n      disabledTabClassName,\n      focus,\n      forceRenderTabPanel,\n      selectedIndex,\n      selectedTabClassName,\n      selectedTabPanelClassName,\n    } = this.props;\n\n    this.tabIds = this.tabIds || [];\n    this.panelIds = this.panelIds || [];\n    let diff = this.tabIds.length - this.getTabsCount();\n\n    // Add ids if new tabs have been added\n    // Don't bother removing ids, just keep them in case they are added again\n    // This is more efficient, and keeps the uuid counter under control\n    while (diff++ < 0) {\n      this.tabIds.push(uuid());\n      this.panelIds.push(uuid());\n    }\n\n    // Map children to dynamically setup refs\n    return deepMap(children, child => {\n      let result = child;\n\n      // Clone TabList and Tab components to have refs\n      if (isTabList(child)) {\n        let listIndex = 0;\n\n        // Figure out if the current focus in the DOM is set on a Tab\n        // If it is we should keep the focus on the next selected tab\n        let wasTabFocused = false;\n\n        if (canUseActiveElement) {\n          wasTabFocused = React.Children.toArray(child.props.children)\n            .filter(isTab)\n            .some((tab, i) => document.activeElement === this.getTab(i));\n        }\n\n        result = cloneElement(child, {\n          children: deepMap(child.props.children, tab => {\n            const key = `tabs-${listIndex}`;\n            const selected = selectedIndex === listIndex;\n\n            const props = {\n              tabRef: node => {\n                this.tabNodes[key] = node;\n              },\n              id: this.tabIds[listIndex],\n              panelId: this.panelIds[listIndex],\n              selected,\n              focus: selected && (focus || wasTabFocused),\n            };\n\n            if (selectedTabClassName)\n              props.selectedClassName = selectedTabClassName;\n            if (disabledTabClassName)\n              props.disabledClassName = disabledTabClassName;\n\n            listIndex++;\n\n            return cloneElement(tab, props);\n          }),\n        });\n      } else if (isTabPanel(child)) {\n        const props = {\n          id: this.panelIds[index],\n          tabId: this.tabIds[index],\n          selected: selectedIndex === index,\n        };\n\n        if (forceRenderTabPanel) props.forceRender = forceRenderTabPanel;\n        if (selectedTabPanelClassName)\n          props.selectedClassName = selectedTabPanelClassName;\n\n        index++;\n\n        result = cloneElement(child, props);\n      }\n\n      return result;\n    });\n  }\n\n  handleKeyDown = e => {\n    if (this.isTabFromContainer(e.target)) {\n      let { selectedIndex: index } = this.props;\n      let preventDefault = false;\n      let useSelectedIndex = false;\n\n      if (e.keyCode === 32 || e.keyCode === 13) {\n        preventDefault = true;\n        useSelectedIndex = false;\n        this.handleClick(e);\n      }\n\n      if (e.keyCode === 37 || e.keyCode === 38) {\n        // Select next tab to the left\n        index = this.getPrevTab(index);\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 39 || e.keyCode === 40) {\n        // Select next tab to the right\n        index = this.getNextTab(index);\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 35) {\n        // Select last tab (End key)\n        index = this.getLastTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 36) {\n        // Select first tab (Home key)\n        index = this.getFirstTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      }\n\n      // This prevents scrollbars from moving around\n      if (preventDefault) {\n        e.preventDefault();\n      }\n\n      // Only use the selected index in the state if we're not using the tabbed index\n      if (useSelectedIndex) {\n        this.setSelected(index, e);\n      }\n    }\n  };\n\n  handleClick = e => {\n    let node = e.target;\n    // eslint-disable-next-line no-cond-assign\n    do {\n      if (this.isTabFromContainer(node)) {\n        if (isTabDisabled(node)) {\n          return;\n        }\n\n        const index = [].slice\n          .call(node.parentNode.children)\n          .filter(isTabNode)\n          .indexOf(node);\n        this.setSelected(index, e);\n        return;\n      }\n    } while ((node = node.parentNode) !== null);\n  };\n\n  /**\n   * Determine if a node from event.target is a Tab element for the current Tabs container.\n   * If the clicked element is not a Tab, it returns false.\n   * If it finds another Tabs container between the Tab and `this`, it returns false.\n   */\n  isTabFromContainer(node) {\n    // return immediately if the clicked element is not a Tab.\n    if (!isTabNode(node)) {\n      return false;\n    }\n\n    // Check if the first occurrence of a Tabs container is `this` one.\n    let nodeAncestor = node.parentElement;\n    do {\n      if (nodeAncestor === this.node) return true;\n      if (nodeAncestor.getAttribute('data-tabs')) break;\n\n      nodeAncestor = nodeAncestor.parentElement;\n    } while (nodeAncestor);\n\n    return false;\n  }\n\n  render() {\n    // Delete all known props, so they don't get added to DOM\n    const {\n      children, // unused\n      className,\n      disabledTabClassName, // unused\n      domRef,\n      focus, // unused\n      forceRenderTabPanel, // unused\n      onSelect, // unused\n      selectedIndex, // unused\n      selectedTabClassName, // unused\n      selectedTabPanelClassName, // unused\n      ...attributes\n    } = this.props;\n\n    return (\n      <div\n        {...attributes}\n        className={cx(className)}\n        onClick={this.handleClick}\n        onKeyDown={this.handleKeyDown}\n        ref={node => {\n          this.node = node;\n          if (domRef) domRef(node);\n        }}\n        data-tabs\n      >\n        {this.getChildren()}\n      </div>\n    );\n  }\n}\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// Get a universally unique identifier\nlet count = 0;\nexport default function uuid() {\n  return `react-tabs-${count++}`;\n}\n\nexport function reset() {\n  count = 0;\n}\n","import { deepForEach } from './childrenDeepMap';\nimport { isTab, isTabPanel } from './elementTypes';\n\nexport function getTabsCount(children) {\n  let tabCount = 0;\n  deepForEach(children, child => {\n    if (isTab(child)) tabCount++;\n  });\n\n  return tabCount;\n}\n\nexport function getPanelsCount(children) {\n  let panelCount = 0;\n  deepForEach(children, child => {\n    if (isTabPanel(child)) panelCount++;\n  });\n\n  return panelCount;\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n  childrenPropType,\n  onSelectPropType,\n  selectedIndexPropType,\n} from '../helpers/propTypes';\nimport UncontrolledTabs from './UncontrolledTabs';\nimport { getTabsCount } from '../helpers/count';\n\nexport default class Tabs extends Component {\n  static defaultProps = {\n    defaultFocus: false,\n    forceRenderTabPanel: false,\n    selectedIndex: null,\n    defaultIndex: null,\n  };\n\n  static propTypes = {\n    children: childrenPropType,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    defaultFocus: PropTypes.bool,\n    defaultIndex: PropTypes.number,\n    disabledTabClassName: PropTypes.string,\n    domRef: PropTypes.func,\n    forceRenderTabPanel: PropTypes.bool,\n    onSelect: onSelectPropType,\n    selectedIndex: selectedIndexPropType,\n    selectedTabClassName: PropTypes.string,\n    selectedTabPanelClassName: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = Tabs.copyPropsToState(this.props, {}, props.defaultFocus);\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      Tabs.inUncontrolledMode(newProps) !== Tabs.inUncontrolledMode(this.props)\n    ) {\n      throw new Error(\n        `Switching between controlled mode (by using \\`selectedIndex\\`) and uncontrolled mode is not supported in \\`Tabs\\`.\nFor more information about controlled and uncontrolled mode of react-tabs see the README.`,\n      );\n    }\n    // Use a transactional update to prevent race conditions\n    // when reading the state in copyPropsToState\n    // See https://github.com/reactjs/react-tabs/issues/51\n    this.setState(state => Tabs.copyPropsToState(newProps, state));\n  }\n\n  static inUncontrolledMode(props) {\n    return props.selectedIndex === null;\n  }\n\n  handleSelected = (index, last, event) => {\n    const { onSelect } = this.props;\n\n    // Call change event handler\n    if (typeof onSelect === 'function') {\n      // Check if the change event handler cancels the tab change\n      if (onSelect(index, last, event) === false) return;\n    }\n\n    const state = {\n      // Set focus if the change was triggered from the keyboard\n      focus: event.type === 'keydown',\n    };\n\n    if (Tabs.inUncontrolledMode(this.props)) {\n      // Update selected index\n      state.selectedIndex = index;\n    }\n\n    this.setState(state);\n  };\n\n  // preserve the existing selectedIndex from state.\n  // If the state has not selectedIndex, default to the defaultIndex or 0\n  static copyPropsToState(props, state, focus = false) {\n    const newState = {\n      focus,\n    };\n\n    if (Tabs.inUncontrolledMode(props)) {\n      const maxTabIndex = getTabsCount(props.children) - 1;\n      let selectedIndex = null;\n\n      if (state.selectedIndex != null) {\n        selectedIndex = Math.min(state.selectedIndex, maxTabIndex);\n      } else {\n        selectedIndex = props.defaultIndex || 0;\n      }\n      newState.selectedIndex = selectedIndex;\n    }\n\n    return newState;\n  }\n\n  render() {\n    const { children, defaultIndex, defaultFocus, ...props } = this.props;\n    const { focus, selectedIndex } = this.state;\n\n    props.focus = focus;\n    props.onSelect = this.handleSelected;\n\n    if (selectedIndex != null) {\n      props.selectedIndex = selectedIndex;\n    }\n\n    return <UncontrolledTabs {...props}>{children}</UncontrolledTabs>;\n  }\n}\n\nTabs.tabsRole = 'Tabs';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cx from 'classnames';\n\nexport default class TabList extends Component {\n  static defaultProps = {\n    className: 'react-tabs__tab-list',\n  };\n\n  static propTypes = {\n    children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n  };\n\n  render() {\n    const { children, className, ...attributes } = this.props;\n\n    return (\n      <ul {...attributes} className={cx(className)} role=\"tablist\">\n        {children}\n      </ul>\n    );\n  }\n}\n\nTabList.tabsRole = 'TabList';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cx from 'classnames';\n\nconst DEFAULT_CLASS = 'react-tabs__tab';\n\nexport default class Tab extends Component {\n  static defaultProps = {\n    className: DEFAULT_CLASS,\n    disabledClassName: `${DEFAULT_CLASS}--disabled`,\n    focus: false,\n    id: null,\n    panelId: null,\n    selected: false,\n    selectedClassName: `${DEFAULT_CLASS}--selected`,\n  };\n\n  static propTypes = {\n    children: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.object,\n      PropTypes.string,\n    ]),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    disabled: PropTypes.bool,\n    tabIndex: PropTypes.string,\n    disabledClassName: PropTypes.string,\n    focus: PropTypes.bool, // private\n    id: PropTypes.string, // private\n    panelId: PropTypes.string, // private\n    selected: PropTypes.bool, // private\n    selectedClassName: PropTypes.string,\n    tabRef: PropTypes.func, // private\n  };\n\n  componentDidMount() {\n    this.checkFocus();\n  }\n\n  componentDidUpdate() {\n    this.checkFocus();\n  }\n\n  checkFocus() {\n    const { selected, focus } = this.props;\n    if (selected && focus) {\n      this.node.focus();\n    }\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      disabled,\n      disabledClassName,\n      focus, // unused\n      id,\n      panelId,\n      selected,\n      selectedClassName,\n      tabIndex,\n      tabRef,\n      ...attributes\n    } = this.props;\n\n    return (\n      <li\n        {...attributes}\n        className={cx(className, {\n          [selectedClassName]: selected,\n          [disabledClassName]: disabled,\n        })}\n        ref={node => {\n          this.node = node;\n          if (tabRef) tabRef(node);\n        }}\n        role=\"tab\"\n        id={id}\n        aria-selected={selected ? 'true' : 'false'}\n        aria-disabled={disabled ? 'true' : 'false'}\n        aria-controls={panelId}\n        tabIndex={tabIndex || (selected ? '0' : null)}\n      >\n        {children}\n      </li>\n    );\n  }\n}\n\nTab.tabsRole = 'Tab';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cx from 'classnames';\n\nconst DEFAULT_CLASS = 'react-tabs__tab-panel';\n\nexport default class TabPanel extends Component {\n  static defaultProps = {\n    className: DEFAULT_CLASS,\n    forceRender: false,\n    selectedClassName: `${DEFAULT_CLASS}--selected`,\n  };\n\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    forceRender: PropTypes.bool,\n    id: PropTypes.string, // private\n    selected: PropTypes.bool, // private\n    selectedClassName: PropTypes.string,\n    tabId: PropTypes.string, // private\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      forceRender,\n      id,\n      selected,\n      selectedClassName,\n      tabId,\n      ...attributes\n    } = this.props;\n\n    return (\n      <div\n        {...attributes}\n        className={cx(className, {\n          [selectedClassName]: selected,\n        })}\n        role=\"tabpanel\"\n        id={id}\n        aria-labelledby={tabId}\n      >\n        {forceRender || selected ? children : null}\n      </div>\n    );\n  }\n}\n\nTabPanel.tabsRole = 'TabPanel';\n"],"names":["isTab","el","type","tabsRole","isTabPanel","isTabList","deepMap","children","callback","Children","map","child","props","cloneElement","deepForEach","forEach","canUseActiveElement","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","default","window","count","uuid","getTabsCount","tabCount","isTabNode","node","getAttribute","isTabDisabled","document","activeElement","e","UncontrolledTabs","tabNodes","handleKeyDown","_this","isTabFromContainer","target","index","selectedIndex","preventDefault","useSelectedIndex","keyCode","handleClick","getPrevTab","getNextTab","getLastTab","getFirstTab","setSelected","slice","parentNode","filter","indexOf","event","this","onSelect","getTab","getPanelsCount","panelCount","getChildren","disabledTabClassName","focus","forceRenderTabPanel","selectedTabClassName","selectedTabPanelClassName","tabIds","panelIds","diff","result","listIndex","wasTabFocused","React","toArray","some","tab","_this2","selected","tabRef","id","panelId","selectedClassName","disabledClassName","tabId","forceRender","nodeAncestor","parentElement","render","className","domRef","attributes","cx","onClick","onKeyDown","ref","_this3","Component","defaultProps","Tabs","handleSelected","last","state","inUncontrolledMode","setState","copyPropsToState","defaultFocus","componentWillReceiveProps","newProps","newState","maxTabIndex","Math","min","defaultIndex","TabList","role","DEFAULT_CLASS","Tab","componentDidMount","checkFocus","componentDidUpdate","disabled","tabIndex","TabPanel"],"mappings":"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"}